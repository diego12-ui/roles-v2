name: Role Assignments CI

on:
  workflow_dispatch:
    inputs:
      scriptPath:
        description: Ruta del .ps1 en el repo
        required: true
        default: scripts/roles-v2.ps1
      PrincipalName:
        description: Nombre del principal (DisplayName)
        required: true
      SubscriptionName:
        description: Nombre de la suscripción (si aplica)
        required: false
      ResourceGroupName:
        description: Resource Group (si aplica)
        required: false
      ResourceType:
        description: Tipo de recurso o alias del mapa (si ScopeType=Resource)
        required: false
      ResourceName:
        description: Nombre del recurso (si ScopeType=Resource)
        required: false
      DuracionTipo:
        type: choice
        description: Permanente o Temporal
        required: true
        options: [Permanente, Temporal]
        default: Permanente
      FechaInicioPeru:
        description: Inicio Perú "MM/dd/yyyy HH:mm:ss" (si Temporal)
        required: false
      FechaFinPeru:
        description: Fin Perú "MM/dd/yyyy HH:mm:ss" (si Temporal)
        required: false


jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal + Secret)
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Ejecutar script de asignación de roles (PowerShell)
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          errorActionPreference: stop
          inlineScript: |
            $p = @{
              Action         = 'Assign'
              PrincipalType  = 'Managed Identity'
              PrincipalName  = '${{ inputs.PrincipalName }}'
              ScopeType      = 'Resource'
              RoleName       = 'Reader'
              DuracionTipo   = '${{ inputs.DuracionTipo }}'
            }
            if ('${{ inputs.SubscriptionName }}')    { $p.SubscriptionName    = '${{ inputs.SubscriptionName }}' }
            if ('${{ inputs.ResourceGroupName }}')   { $p.ResourceGroupName   = '${{ inputs.ResourceGroupName }}' }
            if ('${{ inputs.ResourceType }}')        { $p.ResourceType        = '${{ inputs.ResourceType }}' }
            if ('${{ inputs.ResourceName }}')        { $p.ResourceName        = '${{ inputs.ResourceName }}'
            if ('${{ inputs.FechaInicioPeru }}')     { $p.FechaInicioPeru     = '${{ inputs.FechaInicioPeru }}' }
            if ('${{ inputs.FechaFinPeru }}')        { $p.FechaFinPeru        = '${{ inputs.FechaFinPeru }}' }

            Write-Host "Parámetros efectivos:" ($p | Out-String)

            $scriptPath = '${{ inputs.scriptPath }}'
            if (-not (Test-Path $scriptPath)) {
              throw "No se encontró el script en: $scriptPath"
            }

            & $scriptPath @p
